import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# üîë –¢–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8259877162:AAHQmYUve6jS4ipGZa6HxYFr9cqxFgVD3Os"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

CITIES = config["cities"]
PRODUCTS = config["products"]
PAYMENT_DETAILS = config["payment_details"]
OPERATOR_CONTACT = config["operator_contact"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(city, callback_data=f"city:{city}")] for city in CITIES]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("city:"):
        city = query.data.split(":")[1]
        keyboard = [[InlineKeyboardButton(product, callback_data=f"product:{product}")] for product in PRODUCTS]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"üèô –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

    elif query.data.startswith("product:"):
        product = query.data.split(":")[1]
        text = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {product}\n\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{PAYMENT_DETAILS}\n\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {OPERATOR_CONTACT}"
        )
        await query.edit_message_text(text=text)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()
